#!/usr/bin/env python3

import sys
from random import randrange, seed

def gcd(a, b):
    while b > 0:
        a, b = b, a % b
    return a

def lcm(a, b):
    return a*b // gcd(a, b)

def powmod(base, exponent, modulus):
    r = 1
    while exponent > 0:
        if exponent % 2 > 0:
            r = (r * base) % modulus
        exponent = int(exponent / 2)
        base = (base ** 2) % modulus
    return r

# prime public exponent; there are more secure values, such as 64k+1
e = 3

def rsademo(p, q):
    print("secret: p =", p, "q =", q)
    # alice: set up public-private key pair
    n = p*q                 # public modulus
    phi = lcm(p-1, q-1)     # secret, believed to be hard to find from n

    # public exponent e must be relatively prime with phi
    if phi % e is 0:
        print("e({}) is not relatively prime with phi({})".format(e, phi))
        return

    # derive private key d from e (d is secret), make sure divisible
    if (phi+1) % e is not 0:
        print("phi+1 ({}) is not divisible by e ({})".format(phi+1, e))
        return
    d = (phi+1) // e

    print('phi =', phi, 'secret d =', d)
    print('public: n =', n, 'e =', e)

    # test that bob can send various (random) messages
    for i in range(20):
        m = randrange(0, n)
        # bob encrpyts m using alice's public key (e, n)
        c = powmod(m, e, n)  # same as c = (m**e) % n
        print('m =', m, 'c =', c)
        # alice decrypts c using her private key (d, n)
        dm = powmod(c, d, n) # same as dm = (c**e) % n
        if dm != m:
            print('mismatch m:', m, 'c:', c, ' decrypt:', dm)
            exit(1)

# main
if len(sys.argv) == 3:
    p = int(sys.argv[1])    # secret!
    q = int(sys.argv[2])    # secret!
    rsademo(p, q)
    exit(0)
if len(sys.argv) != 2:
    print('usage: {} [p q] | n'.format(sys.argv[0]))
    exit(0)

primes = (
7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79,
83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157,
163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233,
239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293,
307, 311, 313,
317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401,
409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491,
499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599,
601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683,
691, 701, 709, 719, 727,
1742309, 1739167, 1740721, 1741241, 1743491, 1743517, 1743523, 1743527, 1743529, 1743557,
1743569, 1743589, 1743593, 1743601,
1743613, 1743629, 1743631, 1743641, 1743659, 1743661, 1743671, 1743701, 1743713, 1743727,
1743737, 1743739, 1743761, 1743793, 1743803, 1743811, 1743823, 1743827, 1743829, 1743851,
1743869, 1743871, 1743881, 1743919, 1743923, 1743941, 1743971, 1744007, 1744009, 1744027,
1744049, 1744063, 1744087, 1744097, 1744103, 1744111, 1744139, 1744151, 1744187, 1744213,
1744231, 1744243, 1744247, 1744261, 1744273, 1744279, 1744289, 1744307, 1744313, 1744331,
1744357, 1744361, 1744363, 1744367, 1744397, 1744423, 1744429, 1744433, 1744441, 1744469,
1944373, 1944377, 1944379, 1944389, 1944401, 1944457, 1944469, 1944473, 1944499, 1944521,
1944529, 1944539, 1944557, 1944563, 1944577, 1944583, 1944659, 1944667, 1944689, 1944713,
1944721, 1944727, 1944737, 1944763, 1944779, 1944781, 1944791, 1944797, 1944799, 1944823,
1944829, 1944841, 1944853, 1944881, 1944883, 1944911, 1944923, 1944931, 1944937, 1944961,
1944983, 1944991, 1944997, 1945003, 1945007, 1945043, 1945051, 1945057, 1945061, 1945091,
1945093, 1945109, 1945121, 1945129, 1945169, 1945183, 1945199, 1945243, 1945261, 1945297,
1945301, 1945303, 1945309, 1945313, 1945319, 1945331, 1945337, 1945369, 1945381, 1945393,
1945399, 1945403, 1945439, 1945453, 1945457, 1945483, 1945487, 1945499, 1945511, 1945519,
1945549, 1945553, 1945561, 1945579, 1945597, 1945607, 1945609, 1945627, 1945637, 1945649,
1945651, 1945661, 1945673, 1945681, 1945687, 1945703, 1945709, 1945711, 1945721, 1945729,
1945739, 1945751, 1945763, 1945781, 1945799, 1945817, 1945831, 1945843, 1945859, 1945873,
1945883, 1945891, 1945903, 1945913, 1945919, 1945943, 1945969, 1945981, 1945991, 1946011,
1946017, 1946029, 1946033, 1946059, 1946069, 1946081, 1946093, 1946117, 1946141, 1946171,
1946173, 1946183, 1946207, 1946209, 1946257, 1946281, 1946297, 1946299, 1946369, 1946377,
1946389, 1946401, 1946407, 1946429, 1946443, 1946447, 1946453, 1946471, 1946473, 1946489,
1946501, 1946507, 1946537, 1946543, 1946561, 1946563, 1946579, 1946603, 1946617, 1946621,
1946627, 1946629, 1946641, 1946647, 1946657, 1946663, 1946669, 1946671, 1946689, 1946699,
1946701, 1946713, 1946723, 1946731, 1946761, 1946767, 1946771, 1946779, 1946801, 1946809,
1946839, 1946851, 1946869, 1946899, 1946909, 1946921, 1946933, 1946939, 1946947, 1946963,
1946969, 1946981, 1946999, 1947041, 1947073, 1947091, 1947107, 1947109, 1947119, 1947137,
1947149, 1947151, 1947193, 1947217, 1947223, 1947227, 1947229, 1947241, 1947247, 1947259,
1947269, 1947287, 1947307, 1947311, 1947359, 1947371, 1947383, 1947391, 1947397, 1947419,
1947431, 1947457, 1947467, 1947487, 1947493, 1947497, 1947499, 1947511, 1947527, 1947551,
1947593, 1947607, 1947619, 1947629, 1947641, 1947653, 1947661, 1947667, 1947683, 1947691,
1947703, 1947719, 1947731, 1947733, 1947763, 1947773, 1947779, 1947811, 1947851, 1947853,
1947919, 1947923, 1947941, 1947971, 1947973, 1947977, 1947983, 1947989, 1947991, 1947997,
1948021, 1948043, 1948049, 1948069, 1948073, 1948091, 1948097, 1948099, 1948109, 1948129,
1948139, 1948147, 1948171, 1948181, 1948187, 1948223, 1948229, 1948231, 1948237, 1948267,
1948273, 1948283, 1948301, 1948313, 1948327, 1948337, 1948343, 1948369, 1948411, 1948433,
1948447, 1948483, 1948493, 1948511, 1948517, 1948519, 1948549, 1948553, 1948559, 1948571,
1948601, 1948603, 1948613, 1948619, 1948627, 1948637, 1948649, 1948669, 1948699, 1948703,
1948729, 1948741, 1948747, 1948759, 1948763, 1948777, 1948783, 1948789, 1948799, 1948801,
1948847, 1948861, 1948867, 1948883, 1948907, 1948909, 1948927, 1948937, 1948981, 1948987,
1948993, 1949023, 1949053, 1949081, 1949111, 1949113, 1949117, 1949141, 1949161, 1949179,
1949201, 1949251, 1949257, 1949309, 1949327, 1949333, 1949341, 1949357, 1949359, 1949371,
1949383, 1949417, 1949459, 1949471, 1949473, 1949501, 1949527, 1949531, 1949539, 1949557,
1949573, 1949579, 1949581, 1949627, 1949639, 1949657, 1949707, 1949719, 1949737, 1949741,
1949771, 1949777, 1949791, 1949809, 1949813, 1949819, 1949821, 1949833, 1949839, 1949881,
1949887, 1949911, 1949929, 1949933, 1949939, 1949947, 1949999, 1950017, 1950023, 1950037,
1950043, 1950061, 1950071, 1950073, 1950089, 1950107, 1950133, 1950139, 1950149, 1950161,
1950167, 1950173, 1950181, 1950187, 1950211, 1950227, 1950253, 1950269, 1950271, 1950283,
1950287, 1950317, 1950323, 1950343, 1950349, 1950367, 1950383, 1950391, 1950401, 1950409,
1950419, 1950433, 1950449, 1950457, 1950463, 1950517, 1950527, 1950539, 1950577, 1950617,
1950623, 1950629, 1950643, 1950649, 1950661, 1950667, 1950679, 1950691, 1950703, 1950757,
1950761, 1950763, 1950803, 1950827, 1950833, 1950853, 1950881, 1950889, 1950913, 1950919,
1950941, 1950959, 1950979, 1950989, 1951003, 1951007, 1951013, 1951043, 1951049, 1951051,
1951093, 1951097, 1951099, 1951123, 1951127, 1951133, 1951139, 1951153, 1951177, 1951193,
1951199, 1951223, 1951237, 1951249, 1951253, 1951289, 1951303, 1951321, 1951403, 1951429,
1951441, 1951457, 1951459, 1951463, 1951483, 1951489, 1951493, 1951501, 1951511, 1951529,
1951553, 1951561, 1951591, 1951597, 1951601, 1951603, 1951627, 1951633, 1951657, 1951669,
1951687, 1951693, 1951709, 1951721, 1951739, 1951759, 1951783, 1951793, 1951811, 1951819,
1951823, 1951837, 1951843, 1951867, 1951871, 1951879, 1951891, 1951949, 1951951, 1951967,
1951993, 1951997, 1952021, 1952023, 1952047, 1952053, 1952087, 1952089, 1952099, 1952123,
1952129, 1952131, 1952173, 1952191, 1952201, 1952207, 1952219, 1952221, 1952227, 1952257,
1952261, 1952267, 1952311, 1952317, 1952323, 1952339, 1952351, 1952381, 1952407, 1952413,
1952437, 1952441, 1952449, 1952477, 1952479, 1952519, 1952537, 1952551, 1952557, 1952563,
1952567, 1952579, 1952591, 1952623, 1952627, 1952641, 1952647, 1952653, 1952663, 1952689,
1952693, 1952729, 1952737, 1952747, 1952767, 1952779, 1952813, 1952833, 1952837, 1952851,
1952887, 1952893, 1952911, 1952921, 1952933, 1952939, 1952957, 1952963, 1952981, 1952989,
1953001, 1953013, 1953041, 1953043, 1953053, 1953059, 1953101, 1953109, 1953151, 1953157,
)

for i in range(0, int(sys.argv[1])):
    p1 = primes[randrange(0, len(primes))]
    # the two primes must be different
    while True:
        p2 = primes[randrange(0, len(primes))]
        if p1 is not p2: break
    rsademo(p1, p2)
